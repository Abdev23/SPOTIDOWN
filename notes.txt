
    -   make navbar with   :     logo                      home   contact    terms  privacy-policy   {search}     


    -            add image replacement for cards, make skeleton !!!!!!

  -     FIX Searchbar message "https://www.w3schools.com/howto/howto_js_snackbar.asp"


    -   fix the alert if keyword or link is invalid !

    -   add search for tracks playlists

    -   fix repeated cards !!       let the new stuff appear first then the repeated one

    -   display cards by date order

    -   fix number of propmted cards

    -   fix the long card strings,  make theme based on available space.

    -   add website loading animation

    -   add loading search animation    ,   make card skeleton if possible

    -   add search suggestions !

    -   maybe add lyrics in full into full track/album/playlist page.
        use this package "lyrics-finder"

    -   change instruction images to real images!!!

    -   add online, offline div!!!!

    -   new search values dosnt appear speacially in the playlist!!!!!!!!!!!!!!!!!!!!!

    -   add progress bar later when downloading !!!
    
            def progress_bar(progress, total):
                percent = 100 * (progress / float(total))
                bar = 'â–ˆ' * int(percent) + '-' * (100 - int(percent))
                print(f'\rDownloading track... |{bar}| {percent:.2f}%', end='\r')


    -   fix the scroll look in entire app

    -   fix scroll bar look

    -   update footer social links

    -   add button to scroll all the way up when user is down.



    -   add gradient color to the word SPOTIDOWN on hero section 



    -   Progressive Web App     ------------->      "Add to Home Screen" button in the corner of the screen

    -   if the download happend   -----> make it like an circle that animate in the image of the card.

    -   if play button donst work maybe make a a download artwork/image button!!!!!

    -   maybe add several languages to the app!!!!!!!!!!!!!!!!1


    -   get the contact page from w3schools, chrome search history








    artist            drake     ------>     all albums
                                ------>     20 to 30 latest tracks
                                ------>     20 to 30 latest playlists that has drake tracks
        

    albums            DAMN.     ------>     all albums with the same name
                                ------>     20 to 30 latest tracks that has the same name
                                ------>     20 to 30 latest playlists that has the same name


    playlists         GYM       ------>     all playlists with the same name
                                ------>     20 to 30 latest tracks that has the same name
                                ------>     20 to 30 latest albums that has the same name

    
    tracks            DNA       ------>     all tracks with the same name
                                ------>     20 to 30 latest albums with the same name
                                ------>     20 to 30 latest playlists with the same name
    





        fix icons and links positions in footer

        add wavy background to the footer


        add new font to hero main word "SPOTIDOWN"
	maybe add animation to the word!!!!!!



 fot the blob use this website  https://www.magicpattern.design/tools/blob-generator


I WANT THIS FOOTER          // https://dribbble.com/shots/5750878-Mobile-Footer-Animation





      ---------   add image and content cart loading skeleton if user internet is slow


    ---------------       use light house asap.



/----------------------------------------------------

        make skeleton for card????????????????









// ----------------------------------------------------
FOOTER.JSX


import React from 'react';
import { FaSpotify } from 'react-icons/fa';

import { links, socials } from './Data';
import './Footer.css';


const Footer = () => {
  return (
    <div className='footer'>
      <span className='footer-magic'>
        <div className='footer-magic-blob'>
          <svg id='blob-svg'
                viewBox='0 0 1000 1000'
                xmlns='http://www.w3.org/2000/svg'>
            <defs>
              <linearGradient id='b' gradientTransform='rotate(270 .5 .5)'>
                <stop offset='0%' stopColor='#19b752'/>
                <stop offset='100%' stopColor='#848484'/>
              </linearGradient>
            </defs>
            
            <g clipPath='url(#a)'>
              <path fill='url(#b)'>
                <animate attributeName='d'
                          dur='10000ms'
                          repeatCount='indefinite'
                          values='M760.5 585.5q-89.5 85.5-175 211t-195 24Q281 719 206 609.5T191.5 376Q252 252 376 195.5T607.5 212q107.5 73 175 180.5t-22 193Z;
                                  M754.5 602.5Q705 705 602.5 823T362 858.5Q224 776 158 638t61-215q127-77 204-197t155-1q78 119 152 197t24.5 180.5Z;
                                  M872.5 628Q756 756 628 846t-212.5-43.5q-84.5-133.5-220-218T114 334q54-166 220-106.5T586.5 307Q673 327 831 413.5T872.5 628Z;
                                  M711 601q-9 101-110 112.5T333.5 779Q167 833 95.5 666.5T167 405q143-95 238-158t200-10q105 53 110 158t-4 206Z;
                                  M733.5 589Q678 678 589 825t-175.5-2.5q-86.5-149.5-199-236T188 387q86-113 199-112t278-52q165-53 144.5 112t-76 254Z;
                                  M760.5 585.5q-89.5 85.5-175 211t-195 24Q281 719 206 609.5T191.5 376Q252 252 376 195.5T607.5 212q107.5 73 175 180.5t-22 193Z'
                >
                </animate>
              </path>
            </g>
          </svg>
        </div>
        <div className='footer-magic-blob'>
          <svg id='blob-svg'
                viewBox='0 0 1000 1000'
                xmlns='http://www.w3.org/2000/svg'>
            <defs>
              <linearGradient id='b' gradientTransform='rotate(270 .5 .5)'>
                <stop offset='0%' stopColor='#19b752'/>
                <stop offset='100%' stopColor='#848484'/>
              </linearGradient>
            </defs>
            
            <g clipPath='url(#a)'>
              <path fill='url(#b)'>
                <animate attributeName='d'
                          dur='10000ms'
                          repeatCount='indefinite'
                          values='M760.5 585.5q-89.5 85.5-175 211t-195 24Q281 719 206 609.5T191.5 376Q252 252 376 195.5T607.5 212q107.5 73 175 180.5t-22 193Z;
                                  M754.5 602.5Q705 705 602.5 823T362 858.5Q224 776 158 638t61-215q127-77 204-197t155-1q78 119 152 197t24.5 180.5Z;
                                  M872.5 628Q756 756 628 846t-212.5-43.5q-84.5-133.5-220-218T114 334q54-166 220-106.5T586.5 307Q673 327 831 413.5T872.5 628Z;
                                  M711 601q-9 101-110 112.5T333.5 779Q167 833 95.5 666.5T167 405q143-95 238-158t200-10q105 53 110 158t-4 206Z;
                                  M733.5 589Q678 678 589 825t-175.5-2.5q-86.5-149.5-199-236T188 387q86-113 199-112t278-52q165-53 144.5 112t-76 254Z;
                                  M760.5 585.5q-89.5 85.5-175 211t-195 24Q281 719 206 609.5T191.5 376Q252 252 376 195.5T607.5 212q107.5 73 175 180.5t-22 193Z'
                >
                </animate>
              </path>
            </g>
          </svg>
        </div>
      </span>

      <div className='footer-socials'>
      {
        socials.map((socialIcon) => {
          const {id, url, icon, className} = socialIcon;
          return (
            <a key={id}
                href={url}
                target='_blank'
                className={`fa fa-${className}`}
            >
              {icon}
            </a>
          );
        })
      }
      </div>

      <ul className='footer-links'>
      {
        links.map((link) => {
          const {id, url, text} = link;
          return (
            <li key = {id}>
              <a href = {url}> {text} </a>
            </li>
          );
        })
      }
      </ul>

      <p className='footer-copyright'>
        <a href='/'> <FaSpotify /> SPOTIDOWN.com </a> &nbsp;&copy;&nbsp; 2023 All Rights Reserved.
      </p>
    </div>
  );
}

export default Footer;




// ---------------------------------------------------------

.footer-center {
  width: 100%;
  max-width: var(--max-width);
}

.footer-magic > .footer-span {
  display: inline-block;
  position: relative;
  z-index: 1;
}

.footer-magic > .footer-span > .footer-magic-blob {
  position: absolute;
  top: -70px;
  left: 1200px;
  width: 550px;
  height: 550px;
}

.footer-magic > .footer-span > .footer-magic-blob:nth-child(2)  {
  filter: blur(10px);
}




// ----------------------------------------------------

FOOTER.CSS




/* 
==========
FOOTER CSS
==========
*/

.footer {
  padding: 40px 0px 0px;
  background: #fff;
  bottom: 0;
  width: 100%;
  background-color: var(--clr-black);
  color: var(--clr-grey-1);
  z-index: 1;
  overflow: hidden;
}

.footer .footer-socials {
  text-align: center;
  padding-bottom: 25px;
  color: var(--clr-grey-1);
  z-index: 2;
}

.footer .footer-socials a {
  font-size: 24px;
  color: inherit;
  width: 40px;
  height: 40px;
  line-height: 45px;
  display: inline-block;
  text-align: center;
  margin: 0 8px;
  transition: var(--transition);
}

.footer .footer-socials a:hover {
  color: var(--clr-primary-5);
}

.footer .footer-links {
  margin-top: 0;
  padding: 0;
  list-style: none;
  font-size: 18px;
  line-height: 1.6;
  margin-bottom: 0;
  text-align: center;
  width: 100%;
  display: flex;
  justify-content: center;
  z-index: 2;
}

.footer .footer-links li {
  padding: 0 15px;
}

.footer .footer-links li a {
  text-decoration: none;
  color: var(--clr-grey-1);
  text-transform: capitalize;
  letter-spacing: var(--spacing);
  transition: var(--transition);
}

.footer .footer-links li a:hover {
  background: var(--clr-black);
  color: var(--clr-primary-5);
}

.footer .footer-copyright {
  margin-top: 15px;
  text-align: center;
  font-size: 13px;
  color: var(--clr-grey-1);
  z-index: 2;
}

.footer .footer-copyright a {
  color: var(--clr-primary-5);
}

.footer .footer-copyright svg {
  font-size: 15px;
  position: relative;
  top: 3px;
}

@media (max-width: 820px) {
  .footer .footer-links {
    flex-direction: column;
  }

  .footer .footer-links li {
    text-align: center;
    margin: 10px;
  }
}









//------------------------------------------------------------------------





// POST REQUEST THE METADATA TO THE SERVER. 

const POST_MUSIC_DATA = async () => {
  try {
    const response = await fetch('/api/data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        TAP
      }),
    });
    console.log('%c sendind this to server-1: ', 'color: white; background-color: #26bf2a', response);
    if (response.ok) {
      const data = await response.json();
      console.log('%c sendind this to server-2: ', 'color: white; background-color: #26bf2a', data);
    } else {
      throw new Error('Request failed');
    }
  }
  catch (err) {
    console.error('Error:', err);
  }
}





//------------------------------------------------------------------------


// old download method maybe usefull for downloading metadata art/cover

  /*const download_music = (e, musicObj) => {
    e.preventDefault();
    console.log('downloading ...');

    const url = musicObj.external_urls.spotify;
    e.target.innerText = 'Downloading...'

    fetch(url, {
      method: 'GET',
      headers: {
        'mode': 'cors',
        'Access-Control-Allow-Origin': 'https://open.spotify.com',
        // 'Access-Control-Allow-Methods': 'HEAD, GET, POST, PUT, PATCH, DELETE',
        // 'Access-Control-Allow-Headers': 'Content-Type',

        'Content-Type': 'audio/mpeg, audio/x-ms-wma, audio/vnd.rn-realaudio, audio/x-wav',
        'Authorization': 'Bearer ' + accessToken,

        'X-WebAPI-Authorization': 'Bearer ' + accessToken,
        'X-Doorman-Authorization': 'Bearer ' + accessToken,
        'X-TokenProvider-Authorization': 'Bearer ' + accessToken,
      }
    })
    .then(res => res.blob())
    .then(file => {
      console.log(file);
  
      let tempUrl = URL.createObjectURL(file);
      let aTag = document.createElement('a');

      aTag.href = tempUrl; 
      aTag.download = url.replace(/^.*[\\\/]/, '');
      document.body.appendChild(aTag); 

      aTag.click();
      aTag.remove();
      URL.revokeObjectURL(tempUrl);
      setTimeout(() => {
        e.target.innerHTML = `${DownloadIconHtml}\u00A0Download`;
      }, 3000);
      e.target.innerHTML = `${DownloadDoneIconHtml}\u00A0Downloaded`;
    })
    .catch((err) => {
      setTimeout(() => {
        e.target.innerHTML = `${DownloadIconHtml}\u00A0Download`;
      }, 3000);
      e.target.innerHTML = `${DownloadOffIconHtml}\u00A0Failed`;
      alert('Failed to download track!', err);
    })
  }*/



{ isDownloading ?  (<><MdDownload />&nbsp;Downloading...</>) : (<><MdDownload />&nbsp;Download</>)}




POST
	https://gew1-spclient.spotify.com/gabo-receiver-service/public/v3/events



// ------------------------------------------------------------------------------
            OLD CODE FOR TRUNCATED TEXT
// ------------------------------------------------------------------------------ 

///////////////         Card.jsx      /////////////////////////////////////


import React, { useEffect } from 'react';
import { renderToString } from 'react-dom/server';
import {
  MdDownload,
  MdPlayCircleFilled,
  MdOutlineDownloadDone,
  MdFileDownloadOff
} from 'react-icons/md';

import Track from './Track';
import Album from './Album';
import Playlist from './Playlist';
import './Card.css';


const Card = ({accessToken, metadata, tracks, albums, playlists}) => {

  const DownloadIcon = React.createElement(MdDownload);
  const DownloadIconHtml = renderToString(DownloadIcon);
  const DownloadDoneIcon = React.createElement(MdOutlineDownloadDone);
  const DownloadDoneIconHtml = renderToString(DownloadDoneIcon);
  const DownloadOffIcon = React.createElement(MdFileDownloadOff);
  const DownloadOffIconHtml = renderToString(DownloadOffIcon);

  const searchParameters = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + accessToken
    }
  }

  /*const POST_MUSIC_DATA = async () => {
    // send the album/track/playlist metadata
    console.log('send album/track/playlist metadata');
    console.log('metadata: ', metadata);
    const TAP = [];

    if(metadata.type === 'album')
    {
      const albumTracks = await fetch(
        `https://api.spotify.com/v1/albums/${metadata.id}/tracks?limit=${50}`,
        searchParameters
      )
      .then(response => response.json())
      .then(data => {
        if(data)
        {
          data.items.map((item) => {
            const albumTrack = {
              'href': item.href,
              'url': item.external_urls.spotify,
              'name': item.name,
              'type': item.type,
              'artists': item.artists.map(artist => artist.name),
              'duration': item.duration_ms,
              'image': metadata.images[0].url,
            }
            TAP.push(albumTrack);
          });
        }
        else
        {
          // return 'unknown album id';
          throw new Error('unknown album id');
        }
      })
      .catch(err => { console.error('OPPS! UNKNOWN ALBUM ID: ', err) });
    }
    else if(metadata.type === 'track')
    {
      const track = {
        'href': metadata.href,
        'url': metadata.external_urls.spotify,
        'name': metadata.name,
        'type': metadata.type,
        'artists': metadata.artists.map(artist => artist.name),
        'duration': metadata.duration_ms,
        'image': metadata.album.images[0].url
      }
      TAP.push(track)
    }
    else if(metadata.type === 'playlist')
    {
      const playlistTracks = await fetch(
        `https://api.spotify.com/v1/playlists/${metadata.id}/tracks?limit=${100}`,
        searchParameters
      )
      .then(response => response.json())
      .then(data => {
        if(data)
        {
          data.items.map((item) => {
            const playlistTrack = {
              'href': item.track.href,
              'url': item.track.external_urls.spotify,
              'name': item.track.name,
              'type': item.track.type,
              'artists': item.track.artists.map(artist => artist.name),
              'duration': item.track.duration_ms,
              'image': metadata.images[0].url
            }
            TAP.push(playlistTrack);
          });
        }
        else
        {
          // return 'unknown playlist id';
          throw new Error('unknown playlist id');
        }
      })
      .catch(err => { console.error('OPPS! UNKNOWN PLAYLIST ID: ', err) });
    }

    console.log('%c sendind this to server-TAP: ', 'color: black; background-color: #26bf2a', TAP);
    
    return fetch('/api/data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        TAP
      }),
    })
    .catch((err) => {
      console.error('Error:', err);
      throw new Error('Post Request failed', err);
    });

    // maybe we add then() to get the feedback from the server
    // to be logged in the front!!! 
  }*/

  /*const POST_MUSIC_ART = async () => {
    // send the album /track/playlist cover/art
    console.log('send album/track/playlist image cover/art');
    console.log('metadata: ', metadata);
    const ART_COVER = {};

    if(metadata.type === 'album')
    {
      ART_COVER.image = metadata.images[0].url;
      ART_COVER.width = metadata.images[0].width;
      ART_COVER.height = metadata.images[0].height;
    }
    else if(metadata.type === 'track')
    {
      ART_COVER.image = metadata.album.images[0].url;
      ART_COVER.width = metadata.album.images[0].width;
      ART_COVER.height = metadata.album.images[0].height;
    }
    else if(metadata.type === 'playlist')
    {
      ART_COVER.image = metadata.images[0].url;
      ART_COVER.width = metadata.images[0].width;
      ART_COVER.height = metadata.images[0].height;
    }

    console.log('%c sendind this to server-ART_COVER: ', 'color: black; background-color: #26bf2a', ART_COVER);

    return fetch('/api/art', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ART_COVER
      }),
    })
    .catch((err) => {
      console.error('Error:', err);
      throw new Error('Post Request failed', err);
    });

    // maybe we add then() to get the feedback from the server
    // to be logged in the front!!! 
  }*/

  /*useEffect(() => {
    POST_MUSIC_DATA();
    POST_MUSIC_ART();
  }, []);*/

  return (
    <div className='card'>
      <div className='button-layout'>
        <a className='button-b'
          //  onClick={(e) => POST_MUSIC_DATA()}
           onClick={() => console.log('download TAP')}
        >
          <MdDownload />&nbsp;Download
        </a>
        
        <a className='button-b bordered'
          //  onClick={(e) => POST_MUSIC_ART()}
           onClick={() => console.log('download ART')}
        >
          <MdPlayCircleFilled />&nbsp;Play
        </a>
      </div>

      
      <div className='content-layout'>
      {
        metadata.type === 'album'
          ?  <Album metadata={metadata} albums={albums} />
          : metadata.type === 'track'
          ? <Track metadata={metadata} tracks={tracks} />
          : metadata.type === 'playlist'
          ? <Playlist metadata={metadata} playlists={playlists} />
          : <>
              <h4 className='content-bottom-one'></h4>
              <h4 className='content-bottom-two'></h4>
            </>
      }
      </div>
    </div>
  );
}


export default Card;





///////////////         Album.jsx      /////////////////////////////////////

import React, { useState, useEffect, useRef } from 'react';

import './Card.css';


const Album = ({metadata, albums}) => {
  let title = metadata.name;
  let artist = metadata.artists[0].name;

  let m_ = { title: title, artist: artist };
  console.table(m_);

  const containerRef = useRef(null);
  const titleRef = useRef(null);
  const artistRef = useRef(null);

  const getTextWidth = (text, ref) => {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    context.font = getComputedStyle(ref.current).font;
    return context.measureText(text).width;
  };

  const truncatedText = (ctrWidth) => {
    const containerWidth = ctrWidth;
    const titleWidth = getTextWidth(title, titleRef);
    const artistWidth = getTextWidth(artist, artistRef);

    const maxChars_title = Math.floor((containerWidth / titleWidth) * title.length);
    const maxChars_artist = Math.floor((containerWidth / artistWidth) * artist.length);

    let obj = {
      title_name: title,
      title_length: title.length,
      artist_name: artist,
      artist_length: artist.length,
      title_width: titleWidth,
      artist_width: artistWidth,
      container_width: containerWidth,
      max_characters_title: maxChars_title,
      max_characters_artist: maxChars_artist
    }
    console.table(obj);
    let please = [];

    if (maxChars_title < title.length)
    {
      title = title.slice(0, maxChars_title-8) + '...';
      please.push(title);
    }
    if (maxChars_artist < artist.length)
    {
      artist = artist.slice(0, maxChars_artist-8) + '...';
      please.push(artist);
    }

    return please;
  }


  useEffect(() => {
    truncatedText(containerRef.current.offsetWidth);
  }, [title, artist]);

  // console.log('artist: ', artist, '    <------->    title: ', title);

  return (
    <>
      <figure>
        <img src={metadata.images[0].url}
              alt='Album Image'
        />
      </figure>

      <div className='content'
           ref={containerRef}
      >
        <h4 className='card-type'> {metadata.type === 'album' ? metadata.album_type : metadata.type} </h4>
        <h1 className='title'
            ref={titleRef}
        >
        {
          title
        }
        </h1>
        <h4 className='artist'
            ref={artistRef}
        >
        {
          artist
        }
        </h4>
        <h4 className='content-bottom-one'>
          { metadata.total_tracks } track{(metadata.total_tracks > 1) ? 's' : '' }
        </h4>
        <h4 className='content-bottom-two'> &bull; { new Date(metadata.release_date).getFullYear() } </h4>
      </div>
    </> 
  );
}


export default Album;












///-----------------------------------------------------------------------------
///-----------------------------------------------------------------------------
///-----------------------------------------------------------------------------
///-----------------------------------------------------------------------------


       THIS IS THE HTML CSS AND JAVASCRIPT CODE THAT I NEED MAYBE FOR FOOTER HMMMMM




       HTML 

       <!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <link rel="stylesheet" href="style.css">
  <title>test</title>
</head>

<body>

  <div class="container">
    <div class="card">
      <!-- 3:10 -->
    </div>
  </div>

  
  <script src="main.js"></script>
</body>
</html>



                CSS CODE 

/*
=========
Variables
=========
*/

@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap');

:root {
  /* dark shades of primary color*/
  --clr-primary-1: #0b5124;
  --clr-primary-2: #117a37;
  --clr-primary-3: #16a249;
  --clr-primary-4: #19b752;

  /* primary/main color */
  --clr-primary-5: #1ccb5b;

  /* lighter shades of primary color */
  --clr-primary-6: #33d06b;
  --clr-primary-7: #49d57c;
  --clr-primary-8: #60db8c;
  --clr-primary-9: #77e09d;
  --clr-primary-10: #8ee5ad;

  /* darkest grey - used for headings */
  --clr-grey-1: #636363;
  --clr-grey-2: #737373;
  --clr-grey-3: #848484;
  --clr-grey-4: #959595;

  /* grey used for paragraphs */
  --clr-grey-5: #a5a5a5;
  --clr-grey-6: #aeaeae;
  --clr-grey-7: #b7b7b7;
  --clr-grey-8: #c0c0c0;
  --clr-grey-9: #c9c9c9;
  --clr-grey-10: #d2d2d2;
  --clr-white: #fff;
  --clr-black: #121212;
  --clr-red-dark: hsl(360, 67%, 44%);
  --clr-red-light: hsl(360, 71%, 66%);
  --clr-green-dark: hsl(125, 67%, 44%);
  --clr-green-light: hsl(125, 71%, 66%);
  --transition: all 0.3s linear;
  --spacing: 0.1rem;
  --radius: 0.5rem;
  --light-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  --dark-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  --max-width: 1170px;
  --fixed-width: 620px;
  --view-width: 90vw;
  --small-text: 0.875rem;
  --extra-small-text: 0.7em;

  /* rest of the vars */
  --backgroundColor: var(--grey-50);
  --textColor: var(--grey-900);
  --borderRadius: 0.25rem;
  --border-radius: 5px;

  --letterSpacing: 1px;
  /* box shadow*/
  --shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --shadow-2: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-3: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  --shadow-main: 0 4px 20px rgba(0,0,0,.1);
}

/*
=============
Global Styles
=============
*/

*,
::after,
::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
scroll-behavior: smooth;
}

body {
  font-family:
  'Montserrat',
  'DM Sans',
               'CircularBook',
               'Ubuntu',
               Helvetica,
               -apple-system,
               sans-serif, 
               "Apple Color Emoji";
  background: var(--clr-black);
  color: var(--clr-grey-1);
  line-height: 1.5;
  font-size: 0.875rem;

  /* display: flex; */
  /* flex-direction: column; */
  /* min-height: 100vh; */
}

ul {
list-style-type: none;
}

a {
text-decoration: none;
}

h1,
h2,
h3,
h4,
h5 {
letter-spacing: var(--spacing);
text-transform: capitalize;
line-height: 1.25;
margin-bottom: 0.75rem;
}

h1 {
font-size: 3rem;
}

h2 {
font-size: 2rem;
}

h3 {
font-size: 1.25rem;
}

h4 {
font-size: 0.875rem;
}

h5 {
  font-size: clamp(0.875rem, 1.5vw, 1.5rem); /* Tiny heading */
}

p {
margin-bottom: 1.25rem;
color: var(--clr-grey-5);
}

@media screen and (min-width: 800px) {
  h1 {
    font-size: 4rem;
  }

  h2 {
    font-size: 2.5rem;
  }

  h3 {
    font-size: 1.75rem;
  }

  h4 {
    font-size: 1rem;
  }

  body {
    font-size: 1rem;
  }

  h1,
  h2,
  h3,
  h4 {
    line-height: 1;
  }
}


/* ---------------     header title word  ------------------------- */
/* body {
  display: flex;
  justify-content: center;
  align-items: center;
}

#text {
  height: 70vw;
  width: 100vw;
  stroke-dasharray: 2350;
  animation: 3s fillSvg linear;
}

@keyframes fillSvg {
  0% {
    stroke-dashoffset: 2350;
  }

  100% {
    stroke-dashoffset: 0;
  }
} */


.container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  width: 100%;
  position: relative;
  overflow: hidden;
}

.card {
  width: 400px;
  min-height: 250px;
  background: rgba(255, 255, 255, 0.15);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(18px);
  -webkit-backdrop-filter: blur(18px);
  border: 1px solid rgba(255, 255, 255, 0.18);
  border-radius: 1rem;
  padding: 1.5rem;
  z-index: 10;
  color: whitesmoke;
}






        AND FINALLY THE JAVASCRIPT

/* const fileInput = document.querySelector('input');
const downloadBtn = document.querySelector('button');

downloadBtn.addEventListener('click', e => {
  e.preventDefault(); //preventing from submitting
  downloadBtn.innerText = 'Downloading file...';
  fetchFile(fileInput.value);
});

const fetchFile = (url) => {
  // fetching file & returning as blob
  fetch(url)
  .then(res => res.blob())
  .then(file => {
    console.log(file);

    // URL.createObjectURL creates a url of passed object
    let tempUrl = URL.createObjectURL(file);
    let aTag = document.createElement('a');
    aTag.href = tempUrl; // passing tempURL as href value of <a> tag
    // passing file last name & extionsion as download value from <a> tag
    aTag.download = url.replace(/^.*[\\\/]/, '');
    document.body.appendChild(aTag); // adding <a> tag inside body
    aTag.click(); // clicking <a> tag so that the file download
    aTag.remove(); // removing <a> tag once file downloaded
    URL.revokeObjectURL(tempUrl); //removing tmpURL from document
    downloadBtn.innerText = 'Download File'
  })
  .catch((err) => {
    // catch method will call if any error comes during downloading
    downloadBtn.innerText = 'Download File'
    alert('Failed to download file!');
  })
} */




/*
$(document).ready(function() {
  const basePath = '/wp-json/spotify-downloader/v1/download';
  const placeholderImage = $('#placeholder-image-src').data('image-src');
  var state = {};
  $('#downloader-form').on('submit', function(e) {
      e.preventDefault();
      $('.download-single-track, .download-track, #playlist-tracks, #download-now, #go-back').addClass('d-none');
      var url = $('#spotify-downloader-url').val();
      if (url.indexOf('/playlist/') > 0) {
          var playlistId = url.split('/playlist/')[1].split('/')[0].split('?')[0];
          fetchPlaylist(playlistId);
      } else if (url.indexOf('/track/') > 0) {
          var trackId = url.split('/track/')[1].split('/')[0].split('?')[0];
          fetchTrack(trackId);
      } else if (url.indexOf('/album/') > 0) {
          var albumId = url.split('/album/')[1].split('/')[0].split('?')[0];
          fetchAlbum(albumId);
      }
  });
  $('body').on('click', '.download-track', function() {
      $(this).find('button').text('Fetching...');
      var parent = $(this).parent();
      var artistAndTitle = parent.find('p').text().trim().split(' - ');
      state.fetching = {
          'cover': parent.find('img').attr('src'),
          'artists': artistAndTitle[0],
          'title': artistAndTitle[1]
      };
      downloadTrack($(this).attr('data-track-id'));
  });
  $('body').on('click', '.download-single-track', function() {
      $(this).find('button').text('Fetching...');
      downloadSingleTrack($(this).attr('data-track-id'));
  });
  $('body').on('click', '#download-now', function() {
      var apiRequestPath = encodeURIComponent('download_track/');
      var trackId = $(this).attr('data-track-id');
      var trackName = $(this).attr('data-track-name');
      window.open(basePath + '?api_request_path=' + apiRequestPath + '&item_id=' + trackId + '&track_name=' + trackName, '_blank');
  });
  $('#go-back').on('click', function() {
      $('#go-back').addClass('d-none');
      $('#playlist-tracks').removeClass('d-none');
  });
  function fetchPlaylist(playlistId) {
      var apiRequestPath = encodeURIComponent('playlists/');
      $.get({
          url: basePath + '?api_request_path=' + apiRequestPath + '&item_id=' + playlistId,
          dataType: 'json',
          success: function(response) {
              if (!('error'in response)) {
                  metadata = {
                      artists: response.owner.display_name,
                      title: response.name,
                      cover: response.images[0].url
                  }
                  renderMetadata(metadata);
                  fetchMultipleTracks(playlistId, 'playlist', response.tracks.items);
              }
          }
      });
  }
  ;function fetchTrack(trackId) {
      var apiRequestPath = encodeURIComponent('tracks/')
      $.get({
          url: basePath + '?api_request_path=' + apiRequestPath + '&item_id=' + trackId,
          dataType: 'json',
          success: function(response) {
              if (!('error'in response)) {
                  metadata = {
                      artists: response.artists[0].name,
                      title: response.name,
                      cover: response.album.images[1].url
                  };
                  renderMetadata(metadata);
                  $('.download-single-track').attr('data-track-id', trackId).removeClass('d-none');
              }
          }
      });
  }
  ;function fetchAlbum(albumId) {
      var apiRequestPath = encodeURIComponent('albums/');
      $.get({
          url: basePath + '?api_request_path=' + apiRequestPath + '&item_id=' + albumId,
          dataType: 'json',
          success: function(response) {
              if (!('error'in response)) {
                  var metadata = {
                      cover: response.images[1].url,
                      title: response.name,
                      artists: response.artists[0].name,
                  }
                  renderMetadata(metadata);
                  fetchMultipleTracks(albumId, 'album', response.tracks.items);
              }
          }
      });
  }
  ;function pushToPlaylistTracks(trackList, item, type) {
      if (type == 'album') {
          var cover = document.getElementById("cover-image").src;
          var title = item.name;
          var artists = item.artists[0].name;
          var id = item.id;
      } else {
          var cover = (item.track.album.images[0] && item.track.album.images[0].url) || placeholderImage;
          var title = item.track.name;
          var artists = item.track.artists[0].name;
          var id = item.track.id;
      }
      trackList.push({
          cover: cover,
          title: title,
          artists: artists,
          id: id
      });
  }
  function renderPlaylistTracks(trackList) {
      $('#playlist-tracks').empty();
      $.each(trackList, function() {
          var trackTemplate = $('#track-template').clone().removeClass('d-none').attr('id', null);
          trackTemplate.find('img').attr('src', $(this)[0].cover);
          trackTemplate.find('p').text($(this)[0].artists + ' - ' + $(this)[0].title);
          trackTemplate.find('a').attr('data-track-id', $(this)[0].id);
          $('#playlist-tracks').append(trackTemplate);
      });
      $('#playlist-tracks').removeClass('d-none');
      $('.download-track').removeClass('d-none');
  }
  function fetchMultipleTracks(collectionId, type, itemsList) {
      var trackList = [];
      itemsList.forEach(item=>{
          pushToPlaylistTracks(trackList, item, type);
      }
      );
      renderPlaylistTracks(trackList);
  }
  function downloadSingleTrack(trackId) {
      var apiRequestPath = encodeURIComponent('download/');
      $.get({
          url: basePath + '?api_request_path=' + apiRequestPath + '&item_id=' + trackId,
          dataType: 'json',
          success: function(response) {
              $('#download-now').attr('data-track-id', response.track_id).attr('data-track-name', response.track_name).removeClass('d-none');
              $('.download-single-track').addClass('d-none').find('button').text('Get Download Link');
              scrollToUrl();
          }
      });
  }
  function downloadTrack(trackId) {
      var apiRequestPath = encodeURIComponent('download/');
      $.get({
          url: basePath + '?api_request_path=' + apiRequestPath + '&item_id=' + trackId,
          dataType: 'json',
          success: function(response) {
              $('#playlist-tracks').addClass('d-none');
              renderMetadata(state.fetching);
              state.fetching = null;
              $('#download-now').attr('data-track-id', response.track_id).attr('data-track-name', response.track_name).removeClass('d-none');
              $('#go-back').removeClass('d-none');
              $('.download-track').find('button').text('Get Download Link');
              scrollToUrl();
          }
      });
  }
  function scrollToUrl() {
      document.getElementById('spotify-downloader-url').scrollIntoView({
          behavior: 'smooth'
      });
  }
  function renderMetadata(metadata) {
      var text = metadata.artists + ' - ' + metadata.title;
      var imgUrl = metadata.cover;
      $('#cover-image').attr('src', imgUrl).removeClass('d-none');
      $('#cover-text').text(text);
  }
});
*/


// file:///C:/Users/pc/Desktop/testing/simple-web-test/index.html














// -----------------------------------------------------------------------------------


MAYBE I MIGHT NEED THIS CSS FOR THE    CARD DOWNLOADIN bar




/*
=========
Variables
=========
*/

@import url('https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap');

:root {
  /* dark shades of primary color*/
  --clr-primary-1: #0b5124;
  --clr-primary-2: #117a37;
  --clr-primary-3: #16a249;
  --clr-primary-4: #19b752;

  /* primary/main color */
  --clr-primary-5: #1ccb5b;

  /* lighter shades of primary color */
  --clr-primary-6: #33d06b;
  --clr-primary-7: #49d57c;
  --clr-primary-8: #60db8c;
  --clr-primary-9: #77e09d;
  --clr-primary-10: #8ee5ad;

  /* darkest grey - used for headings */
  --clr-grey-1: #636363;
  --clr-grey-2: #737373;
  --clr-grey-3: #848484;
  --clr-grey-4: #959595;

  /* grey used for paragraphs */
  --clr-grey-5: #a5a5a5;
  --clr-grey-6: #aeaeae;
  --clr-grey-7: #b7b7b7;
  --clr-grey-8: #c0c0c0;
  --clr-grey-9: #c9c9c9;
  --clr-grey-10: #d2d2d2;

  --clr-white: #fff;
  --clr-black: #121212;
  --clr-red-dark: hsl(360, 67%, 44%);
  --clr-red-light: hsl(360, 71%, 66%);
  --clr-green-dark: hsl(125, 67%, 44%);
  --clr-green-light: hsl(125, 71%, 66%);
  --transition: all 0.3s linear;
  --spacing: 0.1rem;
  --radius: 0.5rem;
  --light-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  --dark-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  --max-width: 1170px;
  --fixed-width: 620px;
  --view-width: 90vw;
  --small-text: 0.875rem;
  --extra-small-text: 0.7em;

  /* rest of the vars */
  --backgroundColor: var(--grey-50);
  --textColor: var(--grey-900);
  --borderRadius: 0.25rem;
  --border-radius: 5px;

  --letterSpacing: 1px;
  /* box shadow*/
  --shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --shadow-2: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-3: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-4: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  --shadow-main: 0 4px 20px rgba(0,0,0,.1);
}

/*
=============
GLOBAL STYLES
=============
*/

*,
::after,
::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: 'DM Sans', sans-serif;
  background: var(--clr-black);
  color: var(--clr-grey-1);
  line-height: 1.5;
  font-size: 0.875rem;

  /* display: flex; */
  /* flex-direction: column; */
  /* min-height: 100vh; */
}

ul {
list-style-type: none;
}

a {
text-decoration: none;
}

h1,
h2,
h3,
h4,
h5 {
letter-spacing: var(--spacing);
text-transform: capitalize;
line-height: 1.25;
margin-bottom: 0.75rem;
}

h1 {
font-size: 3rem;
}

h2 {
font-size: 2rem;
}

h3 {
font-size: 1.25rem;
}

h4 {
font-size: 0.875rem;
}

h5 {
  font-size: clamp(0.875rem, 1.5vw, 1.5rem); /* Tiny heading */
}

p {
margin-bottom: 1.25rem;
color: var(--clr-grey-5);
}

@media screen and (min-width: 800px) {
h1 {
  font-size: 4rem;
}

h2 {
  font-size: 2.5rem;
}

h3 {
  font-size: 1.75rem;
}

h4 {
  font-size: 1rem;
}

body {
  font-size: 1rem;
}

h1,
h2,
h3,
h4 {
  line-height: 1;
}
}

.card {
  width:400px;
  background: #181818;
  color: white;
  border-radius: 11px;
  padding: 7px;
  margin: 10px;
  cursor: pointer;
}

.card:hover {
  background-color: #232323;
  transition: 0.3s ease-in-out;
}

.button-layout {
  padding:7px;
  display:-webkit-box;
  display:-ms-flexbox;
  display:flex;
  margin-bottom: 7px;

  /* make buttons content unselectable */
  user-select: none;
  -moz-user-select:none;
  -webkit-user-select: none;
}

.card > .content-layout {
  display:-webkit-box;
  display:-ms-flexbox;
  display:flex;
  margin: 0px 10px;
}

.card > .content-layout > figure {
  margin-bottom: 7px;
}

.card > .content-layout > figure > .image-wrapper {
  position: relative;
  display: flex;
  width: 160px;
  padding: 0px 0;
  border-radius: 8px;
  background: var(--clr-white);
  flex-direction: column;
  align-items: center;
}








/* THIS IS FOR THE NORMAL ONE     MAKE SURE TO CHAGE THE VALUE OF 2 TO NOTHING    progress-bar */
.card > .content-layout > figure > .image-wrapper > .progress-bar-2 {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: 130px;
  width: 130px;
  border-radius: 50%;
  /* background: conic-gradient(var(--clr-primary-5) 3.6deg, transparent 0deg); */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
}

/* .card > .content-layout > figure > .image-wrapper > .progress-bar-2::before { */                     /* for ::before no inner circle */
.card > .content-layout > figure > .image-wrapper > .progress-bar-2 > .progress-bar-2-inner {           /* for inner circle */
  /* content: ""; */
  position: absolute;
  height: 110px;
  width: 110px;
  border-radius: 50%;
  z-index: 2;

  background-image: url('https://i.scdn.co/image/ab67616d0000b273cace8a4b2ff924c9e12e3a96');
  /* border: 10px solid var(--clr-primary-5); */
  /* border-color: transparent; */
}

.card > .content-layout > figure > .image-wrapper > .progress-bar-2 > .progress-value-2 {
  position: relative;
  color: var(--clr-primary-5);
  font-size: 2.3rem;
  font-weight: 600;
  z-index: 3;
}








/* THIS IS FOR THE SVG */
.card > .content-layout > figure > .image-wrapper > .progress-bar {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: 130px;
  width: 130px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
}

.card > .content-layout > figure > .image-wrapper > .progress-bar > .progress-bar-circle {
  transform: rotate(-90deg);
  transform-origin: center;
  filter: drop-shadow(7px 3px 2px rgba(0, 0, 0, 0.7));
}

.card > .content-layout > figure > .image-wrapper > .progress-bar > .progress-bar-value {
  position: relative;
  font-size: 1.82rem;
  font-weight: 600;
  z-index: 3;
}

/*
.card > .content-layout > figure > .image-wrapper > .progress-bar > .progress-value {
  position: relative;
  color: var(--clr-primary-5);
  font-size: 2.3rem;
  font-weight: 600;
  z-index: 3;
} */


/*  filter: drop-shadow(0px 18px 55px rgb(108 99 255 / 99%));    */




.card > .content-layout > figure > .image-wrapper > img {
  position: relative;
  width: 160px;
  border-radius: 7px;
  z-index: 0;
}

.card > .content-layout > figure > .image-wrapper > img:hover {
  background: linear-gradient(0deg, #00000088 30%, #ffffff44 100%);
  filter: drop-shadow(0 0.5rem 1rem rgba(0, 0, 0, 0.6));
  transition: 0.3s ease-in-out;
}

.card > .content-layout > .content {
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
  margin-left: 10px;
}

.card > .content-layout > .content > .card-info-wrapper {
  display: table;
  table-layout: fixed;
  width: 100%;
}

.card > .content-layout > .content > .card-info-wrapper > .card-type {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.card > .content-layout > .content > .card-info-wrapper > .title {
  font-weight: 400;
  font-size: 1.4em;

  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.card > .content-layout > .content > .card-info-wrapper > .artist {
  color: #8A8C8D;
  margin: 7px 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.card > .content-layout > .content > .card-info-wrapper > .content-bottom-one {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.card > .content-layout > .content > .card-info-wrapper > .content-bottom-two {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.button-b {
  font-weight: 700;
  font-size:1.34em;
  margin:4px;
  
  border-radius: 6px;
  text-align: center;
  text-decoration: none;
  padding: 12px 0px;
  background:#1DB954;
  border:3px solid #1DB954;
  color: #191414;
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
  -webkit-transition: 0.2s ease-in-out;
  transition: 0.2s ease-in-out;

  display: flex;
  align-items: center;
  justify-content: center;
}


.button-b:hover{
  background:white;
  border-color:#191414;
  color: #191414;
  border:3px solid white;
}


.button-b.bordered {
  border:3px solid #1DB954;
  background: transparent;
  color: #1DB954;

  display: flex;
  align-items: center;
  justify-content: center;
}

.button-b.bordered:hover{
  background:#252525;
  border-color:#191414;
  color: white;
  border:3px solid white;
}

.card-type {
  color: var(--clr-black);
  background: var(--clr-primary-5);
  border: 2px solid var(--clr-primary-5);
  letter-spacing: normal;
  border-radius: 6px;
  padding: 3px 2px;
  text-align: center;
  width: 40%;
  box-sizing: border-box;
}

@media screen and (max-width: 600px) {
  .card {
    width: 90%;
    display: block;
    margin: 5px;
    overflow: hidden;
  }

  .card-type {
    width: 50%;
  }
}
















/// -------------------------------------------
        OLD - ANIMATION FUNCTION / DOWNLOAD TAP / ART FUNCTIONS

  /* const animateProgressBar = (start, end, duration) => {
    setIsClickable(false);
    const progressBar = progressBarCircleRef.current;
    const progressValue = progressBarValueRef.current;

    const circumference = 2 * Math.PI * progressBar.getAttribute('r');
    // progressBar.style.strokeDasharray = `${circumference}`;

    let current = start;
    const increment = (end - start) / duration * 10;
    const interval = setInterval(() => {
      if (current >= end)
      {
        setIsDownloading(false);
        setIsClickable(true);
        clearInterval(interval);
      }
      else
      {
        current += increment;
        progressBar.style.strokeDasharray = `${(current / 100) * circumference}, ${circumference}`;
        progressValue.textContent = `${Math.round(current) || 0}%`;
      }
    }, 10);
  }; */






  const POST_MUSIC_DATA = async () => {
    // send the album/track/playlist metadata
    // console.log('TAP metadata: ', metadata);
    const TAP = [];
    setIsDownloading(true);

    if(metadata.type === 'album')
    {
      const albumTracks = await fetch(
        `https://api.spotify.com/v1/albums/${metadata.id}/tracks?limit=${50}`,
        searchParameters
      )
      .then(response => response.json())
      .then(data => {
        if(data)
        {
          console.log(data);
          data.items.map((item) => {
            const albumTrack = {
              'href': item.href,
              'url': item.external_urls.spotify,
              'name': item.name,
              'type': item.type,
              'artists': item.artists.map(artist => artist.name),
              'duration': item.duration_ms,
              'image': metadata.images[0].url,
              'release_date': metadata.release_date
            }
            TAP.push(albumTrack);
          });
        }
        else
        {
          // return 'unknown album id';
          throw new Error('unknown album id');
        }
      })
      .catch(err => {
        setIsDownloading(false);
        console.error('OPPS! UNKNOWN ALBUM ID: ', err);
        throw err;
      });
    }
    else if(metadata.type === 'track')
    {
      const track = {
        'href': metadata.href,
        'url': metadata.external_urls.spotify,
        'name': metadata.name,
        'type': metadata.type,
        'artists': metadata.artists.map(artist => artist.name),
        'duration': metadata.duration_ms,
        'image': metadata.album.images[0].url,
        'release_date': metadata.album.release_date
      }
      TAP.push(track);
    }
    else if(metadata.type === 'playlist')
    {
      const playlistTracks = await fetch(
        `https://api.spotify.com/v1/playlists/${metadata.id}/tracks?limit=${100}`,
        searchParameters
      )
      .then(response => response.json())
      .then(data => {
        if(data)
        {
          console.log(data);
          data.items.map((item) => {
            const playlistTrack = {
              'href': item.track.href,
              'url': item.track.external_urls.spotify,
              'name': item.track.name,
              'type': item.track.type,
              'artists': item.track.artists.map(artist => artist.name),
              'duration': item.track.duration_ms,
              'image': item.track.album.images[0].url,
              'added_at': item.added_at
            }
            TAP.push(playlistTrack);
          });
        }
        else
        {
          // return 'unknown playlist id';
          throw new Error('unknown playlist id');
        }
      })
      .catch(err => {
        setIsDownloading(false);
        console.error('OPPS! UNKNOWN PLAYLIST ID: ', err)
      });
    }

    console.log('%c sendind this to server-TAP: ', 'color: black; background-color: #26bf2a', TAP);

    return fetch('/api/tap', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        TAP
      }),
    })
    .then((n) => {
      animateProgressBar(0, 100, duration);
    })
    .catch((err) => {
      console.error('Error:', err);
      throw new Error('TAP Post Request failed', err);
    });
  }

  const POST_MUSIC_ART = async () => {
    // send the album /track/playlist cover/art
    // console.log('ART metadata: ', metadata);
    const ART_COVER = {};
    setIsDownloading(true);

    if(metadata.type === 'album')
    {
      ART_COVER.image = metadata.images[0].url;
      ART_COVER.width = metadata.images[0].width;
      ART_COVER.height = metadata.images[0].height;
    }
    else if(metadata.type === 'track')
    {
      ART_COVER.image = metadata.album.images[0].url;
      ART_COVER.width = metadata.album.images[0].width;
      ART_COVER.height = metadata.album.images[0].height;
    }
    else if(metadata.type === 'playlist')
    {
      ART_COVER.image = metadata.images[0].url;
      ART_COVER.width = metadata.images[0].width;
      ART_COVER.height = metadata.images[0].height;
    }
    else
    {
      ART_COVER.ERROR = 'NO IMAGE TO DISPLAY';
      setIsDownloading(false);
    }

    console.log('%c sendind this to server-ART_COVER: ', 'color: black; background-color: #26bf2a', ART_COVER);

    return fetch('/api/art', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ART_COVER
      }),
    })
    .then((n) => {
      animateProgressBar(0, 100, duration);
    })
    .catch((err) => {
      console.error('Error:', err);
      throw new Error('ART Post Request failed', err);
    });
  }















21 SAVEGE

https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylistMetadata&variables=
{"uri":"spotify:playlist:37i9dQZF1EYkqdzj48dyYq","offset":0,"limit":100}&extensions=
{"persistedQuery":{"version":1,"sha256Hash":"a4d914a7b9549f71317d3d5afe599483aea73feb21f39c175c115281dd745572"}}
	
	

https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylistMetadata&variables=
{"uri":"spotify:playlist:37i9dQZF1EYkqdzj48dyYq","offset":0,"limit":100}&extensions=
{"persistedQuery":{"version":1,"sha256Hash":"a4d914a7b9549f71317d3d5afe599483aea73feb21f39c175c115281dd745572"}}




https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylistMetadata&variables=
{"uri":"spotify:playlist:37i9dQZF1EYkqdzj48dyYq","offset":0,"limit":100}&extensions=
{"persistedQuery":{"version":1,"sha256Hash":"a4d914a7b9549f71317d3d5afe599483aea73feb21f39c175c115281dd745572"}}


https://audio-fa.scdn.co/audio/8255ca2df0ed6708c0a5a634de2cb6675ced4961?1690419130__C3iOObJwOcQ10s7wr1ozSV7SXvWIjKFZdDrDfdE4dU=





50 CENT    WHAT UP GANGSTA

// THIS ONE DIDNT GAVE ME ANYTHING,
https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylistMetadata&variables=
{"uri":"spotify:playlist:37i9dQZF1EYkqdzj48dyYq","offset":0,"limit":100}&extensions=
{"persistedQuery":{"version":1,"sha256Hash":"a4d914a7b9549f71317d3d5afe599483aea73feb21f39c175c115281dd745572"}}



// THIS ONE GAVE ME TRACK SLIDER, WITH TIME
this link give the first 6 second of the track to download on chrome
https://audio-fa.scdn.co/audio/b67df906d7287e947ef079dbe72e7a12872e1271?1690419392_IEZaghdPZ_3RFMe0EMX4c7i85g2j40sKrClJm3kmP_w=


https://audio-fa.scdn.co/audio/b67df906d7287e947ef079dbe72e7a12872e1271?1690419392_IEZaghdPZ_3RFMe0EMX4c7i85g2j40sKrClJm3kmP_w=



                    chrome.tabs.create({ url: SPOTIFY_LOGIN_URL });
        may when im loggin im getting that token well help get the full track!!








